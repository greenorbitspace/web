---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import HeroSection from '../../components/HeroSection.astro';
import eventsData from '../../data/events.json';
import slugify from '../../utils/slugify.js';

// --- UN Country List ---
const UN_COUNTRIES = [
  "Afghanistan","Albania","Algeria","Andorra","Angola","Antigua and Barbuda","Argentina","Armenia",
  "Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium",
  "Belize","Benin","Bhutan","Bolivia","Bosnia and Herzegovina","Botswana","Brazil","Brunei","Bulgaria",
  "Burkina Faso","Burundi","Cabo Verde","Cambodia","Cameroon","Canada","Central African Republic","Chad",
  "Chile","China","Colombia","Comoros","Congo","Costa Rica","Côte d’Ivoire","Croatia","Cuba","Cyprus",
  "Czechia","Democratic Republic of the Congo","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador",
  "Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Eswatini","Ethiopia","Fiji","Finland","France",
  "Gabon","Gambia","Georgia","Germany","Ghana","Greece","Grenada","Guatemala","Guinea","Guinea-Bissau","Guyana",
  "Haiti","Honduras","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Israel","Italy","Jamaica",
  "Japan","Jordan","Kazakhstan","Kenya","Kiribati","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho",
  "Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Madagascar","Malawi","Malaysia","Maldives","Mali",
  "Malta","Marshall Islands","Mauritania","Mauritius","Mexico","Micronesia","Moldova","Monaco","Mongolia",
  "Montenegro","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands","New Zealand","Nicaragua",
  "Niger","Nigeria","North Korea","North Macedonia","Norway","Oman","Pakistan","Palau","Palestine","Panama",
  "Papua New Guinea","Paraguay","Peru","Philippines","Poland","Portugal","Qatar","Romania","Russia","Rwanda",
  "Saint Kitts and Nevis","Saint Lucia","Saint Vincent and the Grenadines","Samoa","San Marino","Sao Tome and Principe",
  "Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Slovakia","Slovenia","Solomon Islands",
  "Somalia","South Africa","South Korea","South Sudan","Spain","Sri Lanka","Sudan","Suriname","Sweden","Switzerland",
  "Syria","Tajikistan","Tanzania","Thailand","Timor-Leste","Togo","Tonga","Trinidad and Tobago","Tunisia","Turkey",
  "Turkmenistan","Tuvalu","Uganda","Ukraine","United Arab Emirates","United Kingdom","United States","Uruguay",
  "Uzbekistan","Vanuatu","Vatican City","Venezuela","Vietnam","Yemen","Zambia","Zimbabwe"
];

// --- Helpers ---
function parseEventDate(dateStr) {
  if (!dateStr) return null;
  const date = new Date(dateStr);
  return isNaN(date) ? null : date;
}

function formatEventDate(date) {
  if (!date) return '';
  return date.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' });
}

function detectCountry(location) {
  if (!location) return '';
  const loc = location.toLowerCase();
  return UN_COUNTRIES.find(c => loc.includes(c.toLowerCase())) || '';
}

const today = new Date();

// --- Normalize Events ---
const upcomingEvents = eventsData
  .map(e => ({
    ...e,
    slug: e.slug || slugify(e.title),
    startDate: parseEventDate(e.start),
    endDate: parseEventDate(e.end),
    location: e.location && e.location !== '-' ? e.location : 'TBD',
    country: detectCountry(e.location),
    organizer: e.organizer || 'TBD',
    status: e.status || 'TBD',
    featured: e.featured || false,
    categories: e.categories || []
  }))
  .filter(e => e.startDate && e.startDate >= today)
  .sort((a, b) => a.startDate - b.startDate);

// --- Group by Month ---
function groupByMonth(eventsList) {
  const grouped = {};
  eventsList.forEach(event => {
    const month = event.startDate.toLocaleString('default', { month: 'long', year: 'numeric' });
    if (!grouped[month]) grouped[month] = [];
    grouped[month].push(event);
  });
  return grouped;
}

const eventsByMonth = groupByMonth(upcomingEvents);

// --- Filter Options ---
const categories = Array.from(new Set(upcomingEvents.flatMap(e => e.categories))).sort();
const organizers = Array.from(new Set(upcomingEvents.map(e => e.organizer))).sort();
const countries = Array.from(new Set(upcomingEvents.map(e => e.country).filter(Boolean))).sort();
const statuses = Array.from(new Set(upcomingEvents.map(e => e.status))).sort();
---

<Layout title="Events | Green Orbit Digital">
  <Header />

  <HeroSection 
    title="Upcoming Events" 
    description="Discover all space, sustainability, and marketing events we are organising or attending." 
  />

  <main class="py-12 max-w-6xl mx-auto px-4 space-y-8">

    <!-- Filters -->
    <section class="filters border-b pb-4 mb-8">
      <h2 class="text-xl font-semibold mb-2">Filter Events</h2>
      <p class="text-sm text-gray-600 mb-4">
        Change any filter to refresh the events list.
      </p>
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
        <select id="categoryFilter" class="border rounded px-2 py-1">
          <option value="">All Categories</option>
          {categories.map(c => <option value={c.toLowerCase()}>{c}</option>)}
        </select>
        <select id="organizerFilter" class="border rounded px-2 py-1">
          <option value="">All Organizers</option>
          {organizers.map(o => <option value={o.toLowerCase()}>{o}</option>)}
        </select>
        <select id="countryFilter" class="border rounded px-2 py-1">
          <option value="">All Countries</option>
          {countries.map(c => <option value={c.toLowerCase()}>{c}</option>)}
        </select>
        <select id="statusFilter" class="border rounded px-2 py-1">
          <option value="">All Statuses</option>
          {statuses.map(s => <option value={s.toLowerCase()}>{s}</option>)}
        </select>
      </div>
    </section>

    <!-- Events by Month -->
    {Object.entries(eventsByMonth).map(([month, events]) => (
      <section class="month-group space-y-6">
        <h2 class="text-2xl font-bold">{month}</h2>
        <ul class="space-y-4">
          {events.map(e => (
            <li class="border border-gray-300 p-4 rounded-lg" 
                data-categories={e.categories.join(', ')} 
                data-organizer={e.organizer.toLowerCase()}
                data-country={e.country.toLowerCase()}
                data-status={e.status.toLowerCase()}>
              
              <h3 class="text-lg font-semibold mb-1">{e.title}</h3>

              {e.categories.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-2">
                  {e.categories.map(cat => (
                    <span class="bg-gray-200 text-gray-800 text-xs font-medium px-2 py-1 rounded-full cursor-pointer hover:bg-gray-300 category-badge" 
                          data-category={cat.toLowerCase()}>
                      {cat}
                    </span>
                  ))}
                </div>
              )}

              <p class="text-sm text-accent-500 mb-1">
                {formatEventDate(e.startDate)}{e.endDate ? ` - ${formatEventDate(e.endDate)}` : ''}
              </p>
              <p class="text-sm mb-1">{e.location}</p>
              <p class="text-sm mb-2">{e.organizer}</p>
              <a href={`/events/${e.slug}/`} class="inline-block px-4 py-2 bg-accent-500 text-white rounded hover:bg-accent-500">
                View Event
              </a>
            </li>
          ))}
        </ul>
      </section>
    ))}

  </main>

  <Footer />
</Layout>

<script type="module">
  const allEvents = [...document.querySelectorAll('li[data-categories]')];
  const categorySelect = document.getElementById('categoryFilter');
  const organizerSelect = document.getElementById('organizerFilter');
  const countrySelect = document.getElementById('countryFilter');
  const statusSelect = document.getElementById('statusFilter');

  function filterEvents() {
    const category = categorySelect.value;
    const organizer = organizerSelect.value;
    const country = countrySelect.value;
    const status = statusSelect.value;

    allEvents.forEach(card => {
      const cardCategory = card.dataset.categories.toLowerCase();
      const cardOrganizer = card.dataset.organizer;
      const cardCountry = card.dataset.country;
      const cardStatus = card.dataset.status;

      const show =
        (!category || cardCategory.includes(category)) &&
        (!organizer || cardOrganizer.includes(organizer)) &&
        (!country || cardCountry.includes(country)) &&
        (!status || cardStatus.includes(status));

      card.style.display = show ? '' : 'none';
    });
  }

  [categorySelect, organizerSelect, countrySelect, statusSelect].forEach(select => {
    select.addEventListener('change', filterEvents);
  });

  // --- Clickable category badges ---
  document.querySelectorAll('.category-badge').forEach(badge => {
    badge.addEventListener('click', () => {
      categorySelect.value = badge.dataset.category;
      filterEvents();
      categorySelect.scrollIntoView({ behavior: 'smooth', block: 'start' });
    });
  });
</script>