---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import HeroSection from '../../components/HeroSection.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug ?? post.id },
  }));
}

const { slug } = Astro.params;
const posts = await getCollection('blog');

// Match post by slug or fallback to ID
const postEntry = posts.find((p) => p.slug === slug || p.id === slug);

if (!postEntry) {
  throw new Error(`No blog post found for slug: "${slug}"`);
}

// ✅ Use .render() to get Content and headings
const { Content, headings } = await postEntry.render();
const data = postEntry.data;

const formattedDate = data.pubdate
  ? new Date(data.pubdate).toLocaleDateString('en-GB', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    })
  : null;

const pageTitle = data.seoTitle || data.title || 'Blog Post';
const pageDescription =
  data.seoDescription || data.description || data.title || 'Blog post on Green Orbit Digital';
const pageURL = `https://greenorbit.space/blog/${slug}`;
const pageAuthor = data.author || 'Green Orbit Digital';
const pageImage = data.featuredImage || '/default-og-image.jpg';

const jsonLd = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: pageTitle,
  description: pageDescription,
  author: {
    "@type": "Person",
    name: pageAuthor,
  },
  datePublished: data.pubdate,
  url: pageURL,
  publisher: {
    "@type": "Organization",
    name: "Green Orbit Digital",
    logo: {
      "@type": "ImageObject",
      url: "https://greenorbit.space/logo.svg",
    },
  },
  ...(pageImage && { image: pageImage }),
};
---

<Layout title={pageTitle}>
  <Header />

  <main class="py-12">
    <HeroSection 
      title="Blog" 
      description="Explore our latest blog posts." 
    />
  
  <main class="prose dark:prose-invert max-w-4xl mx-auto px-4 py-12">
    <article>
      <!-- Post Header -->
      <header class="mb-8">
        <h1 class="text-4xl font-bold text-accent-500 mb-2">{data.title}</h1>
        <div class="text-sm text-white/80 mb-2">
          {formattedDate && (
            <time dateTime={data.pubdate}>{formattedDate}</time>
          )}
          {data.author && <span> · By {data.author}</span>}
        </div>
        {data.tags?.length && (
          <div class="mt-2 flex flex-wrap gap-2">
            {data.tags.map((tag) => (
              <a
                href={`/blog?tag=${encodeURIComponent(tag)}`}
                class="text-xs bg-accent-600 text-white px-2 py-1 rounded hover:bg-accent-700 transition"
              >
                #{tag}
              </a>
            ))}
          </div>
        )}
      </header>

      <!-- Main Content -->
      <Content />
    </article>
  </main>

  <Footer />
</Layout>