---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import HeroSection from '../../components/HeroSection.astro';
import { getCollection } from 'astro:content';
import authors from '../../data/authors.js';
import crypto from 'crypto';
import { slug as slugify } from 'github-slugger';

export async function getStaticPaths() {
  const posts = await getCollection('press-releases');
  return posts.map(post => ({
    params: { slug: post.slug ?? post.id },
  }));
}

const { slug } = Astro.params;
const posts = await getCollection('press-releases');
const postEntry = posts.find(p => p.slug === slug || p.id === slug);

if (!postEntry) throw new Error(`No press-releases post found for slug: "${slug}"`);

const { Content } = await postEntry.render();
const data = postEntry.data;

// Normalize frontmatter author name to slug for lookup
const authorSlug = slugify(data.author || '').toLowerCase();

// Find author by slug in authors array
const authorInfo = authors.find(a => a.slug === authorSlug) || null;

function getGravatarUrl(email, size = 80) {
  if (!email) return null;
  const hash = crypto.createHash('md5').update(email.trim().toLowerCase()).digest('hex');
  return `https://www.gravatar.com/avatar/${hash}?s=${size}&d=identicon`;
}

const avatarUrl = authorInfo?.gravatar && authorInfo.email
  ? getGravatarUrl(authorInfo.email)
  : authorInfo?.avatar || '/images/default-author.png';

const formattedDate = data.pubdate
  ? new Date(data.pubdate).toLocaleDateString('en-GB', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    })
  : null;

// Meta info
const pageTitle = data.seoTitle || data.title || 'press-releases Post';
const pageDescription = data.seoDescription || data.description || data.title || 'press-releases post on Green Orbit Digital';
const pageURL = `https://greenorbit.space/press-releases/${slug}`;
const pageAuthor = data.author || 'Green Orbit Digital';
const pageImage = data.featuredImage || '/default-og-image.jpg';

const jsonLd = {
  "@context": "https://schema.org",
  "@type": "press-releasesPosting",
  headline: pageTitle,
  description: pageDescription,
  author: {
    "@type": "Person",
    name: pageAuthor,
  },
  datePublished: data.pubdate,
  url: pageURL,
  publisher: {
    "@type": "Organization",
    name: "Green Orbit Digital",
    logo: {
      "@type": "ImageObject",
      url: "https://greenorbit.space/logo.svg",
    },
  },
  ...(pageImage && { image: pageImage }),
};
---

<Layout title={pageTitle}>
  <Header />

  <main class="py-12">
    <HeroSection
      title="press-releases"
      description="Explore our latest press-releases."
    />

    <main class="prose dark:prose-invert max-w-4xl mx-auto px-4 py-12">
      <article>
        <header class="mb-8">
          <h1 class="text-4xl font-bold text-accent-500 mb-2">{data.title}</h1>

            {authorInfo && (
              <div class="flex items-center gap-2 mt-4 text-sm text-white">
                <img src={avatarUrl} alt={authorInfo.name} class="w-6 h-6 rounded-full" />
                <span>
                  By <a href={`/authors/${authorInfo.slug}`} class="underline">{authorInfo.name}</a>
                </span>
                <span> Â· {formattedDate}</span>
              </div>
            )}

            {data.tags?.length && (
              <div class="mt-2 flex flex-wrap gap-2">
                {data.tags.map((tag) => (
                  <a
                    href={`/press-releases?tag=${encodeURIComponent(tag)}`}
                    class="text-xs bg-accent-600 text-white px-2 py-1 rounded hover:bg-accent-700 transition"
                  >
                    #{tag}
                  </a>
                ))}
              </div>
            )}
          </div>
        </header>

        <Content />
      </article>
    </main>

  <Footer />
</Layout>