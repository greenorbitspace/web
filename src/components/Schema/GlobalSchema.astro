---
import organisations from "../../data/organisations.json";
import brands from "../../data/schema/brands.json";
import socials from "../../data/schema/socials.json";
import contact from "../../data/schema/contact.json";
import founders from "../../data/schema/founders.json";
import areas from "../../data/schema/areas.json";
import knowledge from "../../data/schema/knowledge.json";
import profiles from "../../data/schema/profiles.json";

// --- Safe JSON copies ---
const safeFounders = JSON.parse(JSON.stringify(founders));
const safeContact = JSON.parse(JSON.stringify(contact));
const safeAreas = JSON.parse(JSON.stringify(areas));
const safeKnowledge = JSON.parse(JSON.stringify(knowledge));
const safeBrands = JSON.parse(JSON.stringify(brands));

// --- Filter member or partner organisations ---
const memberOfOrgs = organisations
  .filter(org => ["member", "partner"].includes(org.Type))
  .map(org => ({
    "@type": "Organization",
    name: org.Organisation,
    url: org.URL,
    description: org.Description || "",
    logo: org.logo || ""
  }));

// --- Flatten profiles ---
const flattenedProfiles = Object.values(profiles.profiles || {}).flat();

// --- sameAs links ---
const sameAsLinks = Array.from(
  new Set([
    ...socials.map(s => (typeof s === "string" ? s : s.url)),
    ...flattenedProfiles.map(p => (typeof p === "string" ? p : p.url))
  ])
);

// --- Build orgSchema ---
const orgSchema = {
  "@context": "https://schema.org",
  "@type": "Organization",
  name: "Green Orbit Digital",
  alternateName: "Green Orbit",
  url: "https://greenorbit.space",
  logo: "https://greenorbit.space/images/logo.png",
  foundingDate: "2023-10-12",
  description: "Green Orbit Digital is a Leicester-based agency specialising in sustainable marketing for the space sector. We help space organisations grow through strategic SEO, content, PR, and digital sustainability practices.",
  founder: safeFounders,
  contactPoint: safeContact.contactPoint || [],
  address: safeContact.address || {},
  sameAs: sameAsLinks,
  areaServed: safeAreas || [],
  memberOf: memberOfOrgs,
  knowsAbout: safeKnowledge || [],
  brand: safeBrands || []
};
---

<script type="application/ld+json" is:inline>
{JSON.stringify(orgSchema, null, 2)}
</script>